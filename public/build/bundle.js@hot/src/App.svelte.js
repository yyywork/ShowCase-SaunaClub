
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
System.register(['../node_modules/svelte/internal/index.mjs.js', '../node_modules/carbon-components-svelte/src/UIShell/GlobalHeader/Header.svelte.js', '../node_modules/carbon-components-svelte/src/UIShell/GlobalHeader/HeaderNav.svelte.js', '../node_modules/carbon-components-svelte/src/UIShell/GlobalHeader/HeaderNavItem.svelte.js', '../node_modules/carbon-components-svelte/src/UIShell/GlobalHeader/HeaderNavMenu.svelte.js', '../node_modules/carbon-components-svelte/src/UIShell/SideNav/SideNav.svelte.js', '../node_modules/carbon-components-svelte/src/UIShell/SideNav/SideNavItems.svelte.js', '../node_modules/carbon-components-svelte/src/UIShell/SideNav/SideNavMenu.svelte.js', '../node_modules/carbon-components-svelte/src/UIShell/SideNav/SideNavMenuItem.svelte.js', '../node_modules/carbon-components-svelte/src/UIShell/SideNav/SideNavLink.svelte.js', '../node_modules/carbon-components-svelte/src/UIShell/SideNavDivider.svelte.js', '../node_modules/carbon-components-svelte/src/UIShell/SkipToContent.svelte.js', '../node_modules/carbon-components-svelte/src/UIShell/Content.svelte.js', '../node_modules/carbon-components-svelte/src/Grid/Grid.svelte.js', '../node_modules/carbon-components-svelte/src/Grid/Row.svelte.js', '../node_modules/carbon-components-svelte/src/Grid/Column.svelte.js', '../node_modules/carbon-components-svelte/css/white.css.js', './app.styl.js'], function (exports) {
  'use strict';
  var create_component, space, mount_component, insert_dev, noop, transition_in, transition_out, destroy_component, detach_dev, dispatch_dev, element, add_location, validate_slots, SvelteComponentDev, init, safe_not_equal, Header, HeaderNav, HeaderNavItem, HeaderNavMenu, SideNav, SideNavItems, SideNavMenu, SideNavMenuItem, SideNavLink, SideNavDivider, SkipToContent, Content, Grid, Row, Column;
  return {
    setters: [function (module) {
      create_component = module.create_component;
      space = module.space;
      mount_component = module.mount_component;
      insert_dev = module.insert_dev;
      noop = module.noop;
      transition_in = module.transition_in;
      transition_out = module.transition_out;
      destroy_component = module.destroy_component;
      detach_dev = module.detach_dev;
      dispatch_dev = module.dispatch_dev;
      element = module.element;
      add_location = module.add_location;
      validate_slots = module.validate_slots;
      SvelteComponentDev = module.SvelteComponentDev;
      init = module.init;
      safe_not_equal = module.safe_not_equal;
    }, function (module) {
      Header = module.default;
    }, function (module) {
      HeaderNav = module.default;
    }, function (module) {
      HeaderNavItem = module.default;
    }, function (module) {
      HeaderNavMenu = module.default;
    }, function (module) {
      SideNav = module.default;
    }, function (module) {
      SideNavItems = module.default;
    }, function (module) {
      SideNavMenu = module.default;
    }, function (module) {
      SideNavMenuItem = module.default;
    }, function (module) {
      SideNavLink = module.default;
    }, function (module) {
      SideNavDivider = module.default;
    }, function (module) {
      SkipToContent = module.default;
    }, function (module) {
      Content = module.default;
    }, function (module) {
      Grid = module.default;
    }, function (module) {
      Row = module.default;
    }, function (module) {
      Column = module.default;
    }, function () {}, function () {}],
    execute: function () {

      /* src\App.svelte generated by Svelte v3.42.4 */
      const file = "src\\App.svelte";

      // (22:2) <HeaderNav>
      function create_default_slot_1(ctx) {
      	let headernavitem0;
      	let t0;
      	let headernavitem1;
      	let t1;
      	let headernavitem2;
      	let t2;
      	let headernavitem3;
      	let current;

      	headernavitem0 = new HeaderNavItem({
      			props: { href: "/", text: "Why" },
      			$$inline: true
      		});

      	headernavitem1 = new HeaderNavItem({
      			props: { href: "/", text: "What" },
      			$$inline: true
      		});

      	headernavitem2 = new HeaderNavItem({
      			props: { href: "/", text: "How" },
      			$$inline: true
      		});

      	headernavitem3 = new HeaderNavItem({
      			props: { href: "/", text: "Where" },
      			$$inline: true
      		});

      	const block = {
      		c: function create() {
      			create_component(headernavitem0.$$.fragment);
      			t0 = space();
      			create_component(headernavitem1.$$.fragment);
      			t1 = space();
      			create_component(headernavitem2.$$.fragment);
      			t2 = space();
      			create_component(headernavitem3.$$.fragment);
      		},
      		m: function mount(target, anchor) {
      			mount_component(headernavitem0, target, anchor);
      			insert_dev(target, t0, anchor);
      			mount_component(headernavitem1, target, anchor);
      			insert_dev(target, t1, anchor);
      			mount_component(headernavitem2, target, anchor);
      			insert_dev(target, t2, anchor);
      			mount_component(headernavitem3, target, anchor);
      			current = true;
      		},
      		p: noop,
      		i: function intro(local) {
      			if (current) return;
      			transition_in(headernavitem0.$$.fragment, local);
      			transition_in(headernavitem1.$$.fragment, local);
      			transition_in(headernavitem2.$$.fragment, local);
      			transition_in(headernavitem3.$$.fragment, local);
      			current = true;
      		},
      		o: function outro(local) {
      			transition_out(headernavitem0.$$.fragment, local);
      			transition_out(headernavitem1.$$.fragment, local);
      			transition_out(headernavitem2.$$.fragment, local);
      			transition_out(headernavitem3.$$.fragment, local);
      			current = false;
      		},
      		d: function destroy(detaching) {
      			destroy_component(headernavitem0, detaching);
      			if (detaching) detach_dev(t0);
      			destroy_component(headernavitem1, detaching);
      			if (detaching) detach_dev(t1);
      			destroy_component(headernavitem2, detaching);
      			if (detaching) detach_dev(t2);
      			destroy_component(headernavitem3, detaching);
      		}
      	};

      	dispatch_dev("SvelteRegisterBlock", {
      		block,
      		id: create_default_slot_1.name,
      		type: "slot",
      		source: "(22:2) <HeaderNav>",
      		ctx
      	});

      	return block;
      }

      // (21:1) <Header company="Showing" platformName="Nothssing">
      function create_default_slot(ctx) {
      	let headernav;
      	let current;

      	headernav = new HeaderNav({
      			props: {
      				$$slots: { default: [create_default_slot_1] },
      				$$scope: { ctx }
      			},
      			$$inline: true
      		});

      	const block = {
      		c: function create() {
      			create_component(headernav.$$.fragment);
      		},
      		m: function mount(target, anchor) {
      			mount_component(headernav, target, anchor);
      			current = true;
      		},
      		p: function update(ctx, dirty) {
      			const headernav_changes = {};

      			if (dirty & /*$$scope*/ 1) {
      				headernav_changes.$$scope = { dirty, ctx };
      			}

      			headernav.$set(headernav_changes);
      		},
      		i: function intro(local) {
      			if (current) return;
      			transition_in(headernav.$$.fragment, local);
      			current = true;
      		},
      		o: function outro(local) {
      			transition_out(headernav.$$.fragment, local);
      			current = false;
      		},
      		d: function destroy(detaching) {
      			destroy_component(headernav, detaching);
      		}
      	};

      	dispatch_dev("SvelteRegisterBlock", {
      		block,
      		id: create_default_slot.name,
      		type: "slot",
      		source: "(21:1) <Header company=\\\"Showing\\\" platformName=\\\"Nothssing\\\">",
      		ctx
      	});

      	return block;
      }

      function create_fragment(ctx) {
      	let main;
      	let header;
      	let current;

      	header = new Header({
      			props: {
      				company: "Showing",
      				platformName: "Nothssing",
      				$$slots: { default: [create_default_slot] },
      				$$scope: { ctx }
      			},
      			$$inline: true
      		});

      	const block = {
      		c: function create() {
      			main = element("main");
      			create_component(header.$$.fragment);
      			add_location(main, file, 18, 0, 1387);
      		},
      		l: function claim(nodes) {
      			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      		},
      		m: function mount(target, anchor) {
      			insert_dev(target, main, anchor);
      			mount_component(header, main, null);
      			current = true;
      		},
      		p: function update(ctx, [dirty]) {
      			const header_changes = {};

      			if (dirty & /*$$scope*/ 1) {
      				header_changes.$$scope = { dirty, ctx };
      			}

      			header.$set(header_changes);
      		},
      		i: function intro(local) {
      			if (current) return;
      			transition_in(header.$$.fragment, local);
      			current = true;
      		},
      		o: function outro(local) {
      			transition_out(header.$$.fragment, local);
      			current = false;
      		},
      		d: function destroy(detaching) {
      			if (detaching) detach_dev(main);
      			destroy_component(header);
      		}
      	};

      	dispatch_dev("SvelteRegisterBlock", {
      		block,
      		id: create_fragment.name,
      		type: "component",
      		source: "",
      		ctx
      	});

      	return block;
      }

      function instance($$self, $$props, $$invalidate) {
      	let { $$slots: slots = {}, $$scope } = $$props;
      	validate_slots('App', slots, []);
      	const writable_props = [];

      	Object.keys($$props).forEach(key => {
      		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
      	});

      	$$self.$capture_state = () => ({
      		Header,
      		HeaderNav,
      		HeaderNavItem,
      		HeaderNavMenu,
      		SideNav,
      		SideNavItems,
      		SideNavMenu,
      		SideNavMenuItem,
      		SideNavLink,
      		SideNavDivider,
      		SkipToContent,
      		Content,
      		Grid,
      		Row,
      		Column
      	});

      	return [];
      }

      class App extends SvelteComponentDev {
      	constructor(options) {
      		super(options);
      		init(this, options, instance, create_fragment, safe_not_equal, {});

      		dispatch_dev("SvelteRegisterComponent", {
      			component: this,
      			tagName: "App",
      			options,
      			id: create_fragment.name
      		});
      	}
      } exports('default', App);

    }
  };
});
//# sourceMappingURL=App.svelte.js.map
